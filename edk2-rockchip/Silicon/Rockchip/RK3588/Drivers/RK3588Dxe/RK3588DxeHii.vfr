/** @file
 *
 *  Copyright (c) 2018 Andrei Warkentin <andrey.warkentin@gmail.com>
 *  Copyright (c) 2020, ARM Limited. All rights reserved.
 *  Copyright (c) 2023-2025, Mario Bălănică <mariobalanica02@gmail.com>
 *
 *  SPDX-License-Identifier: BSD-2-Clause-Patent
 *
 **/

#include <Guid/HiiPlatformSetupFormset.h>
#include <VarStoreData.h>

#include "RK3588DxeFormSetGuid.h"

#define VFR_FILE_INCLUDE
#include "CpuPerformance.h"
#include "FanControl.h"
#include "DebugSerialPort.h"
#include "Display.h"

//
// EFI Variable attributes
//
#define EFI_VARIABLE_NON_VOLATILE       0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS     0x00000004
#define EFI_VARIABLE_READ_ONLY          0x00000008

formset
    guid      = RK3588DXE_FORMSET_GUID,
    title     = STRING_TOKEN(STR_FORM_SET_TITLE),
    help      = STRING_TOKEN(STR_FORM_SET_TITLE_HELP),
    classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

    efivarstore UINT32,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,
      name  = DisplayConnectorsMask,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DISPLAY_MODE_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,
      name  = DisplayModePresetDefault,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DISPLAY_MODE_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayModePreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DISPLAY_MODE,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,
      name  = DisplayModeCustomDefault,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DISPLAY_MODE,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayModeCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DISPLAY_CONNECTORS_PRIORITY_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayConnectorsPriority,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayForceOutput,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayDuplicateOutput,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT16,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DisplayRotation,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = HdmiSignalingMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_PRESET_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterClockPreset,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_CLOCK_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterClockCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPULClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB01ClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterVoltageMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CPU_PERF_CLUSTER_VOLTAGE_CUSTOM_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuPerf_CPUB23ClusterVoltageCustom,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore COMBO_PHY_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = ComboPhy0Mode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore COMBO_PHY_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = ComboPhy1Mode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore COMBO_PHY_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = ComboPhy2Mode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore USBDP_PHY_USB3_STATE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = UsbDpPhy0Usb3State,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore USBDP_PHY_USB3_STATE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = UsbDpPhy1Usb3State,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore PCIE30_STATE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = Pcie30State,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore PCIE30_PHY_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = Pcie30PhyMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore CONFIG_TABLE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = ConfigTableMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore ACPI_PCIE_ECAM_COMPAT_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = AcpiPcieEcamCompatMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore FDT_COMPAT_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtCompatMode,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,
      name  = FdtCompatModeVendorSupported,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS,
      name  = FdtCompatModeMainlineSupported,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore FDT_FORCE_GOP_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtForceGop,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore FDT_SUPPORT_OVERRIDES_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtSupportOverrides,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore UINT8,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtOverrideFixup,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore FDT_OVERRIDE_PATH_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtOverrideBasePath,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore FDT_OVERRIDE_PATH_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FdtOverrideOverlayPath,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore COOLING_FAN_STATE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CoolingFanState,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore COOLING_FAN_SPEED_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CoolingFanSpeed,
      guid  = RK3588DXE_FORMSET_GUID;

    efivarstore DEBUG_SERIAL_PORT_BAUD_RATE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = DebugSerialPortBaudRate,
      guid  = RK3588DXE_FORMSET_GUID;

    form formid = 1,
      title  = STRING_TOKEN(STR_FORM_SET_TITLE);
      subtitle text = STRING_TOKEN(STR_FORM_SET_TITLE_SUBTITLE);

      subtitle text = STRING_TOKEN(STR_NULL_STRING);

    suppressif ideqval DisplayConnectorsMask == 0;
      goto 0x1000,
        prompt = STRING_TOKEN(STR_DISPLAY_FORM_TITLE),
        help = STRING_TOKEN(STR_DISPLAY_FORM_HELP);
    endif;

      goto 0x1001,
        prompt = STRING_TOKEN(STR_CPU_PERF_FORM_TITLE),
        help = STRING_TOKEN(STR_CPU_PERF_FORM_HELP);

      goto 0x1002,
        prompt = STRING_TOKEN(STR_COMBO_PHY_FORM_TITLE),
        help = STRING_TOKEN(STR_COMBO_PHY_FORM_HELP);

#if FixedPcdGetBool (PcdUsbDpPhy0Supported) || FixedPcdGetBool (PcdUsbDpPhy1Supported)
      goto 0x1003,
        prompt = STRING_TOKEN(STR_USBDP_PHY_FORM_TITLE),
        help = STRING_TOKEN(STR_USBDP_PHY_FORM_HELP);
#endif

#if FixedPcdGetBool (PcdPcie30Supported)
      goto 0x1004,
        prompt = STRING_TOKEN(STR_PCIE30_FORM_TITLE),
        help = STRING_TOKEN(STR_PCIE30_FORM_HELP);
#endif

      goto 0x1005,
        prompt = STRING_TOKEN(STR_CONFIG_TABLE_FORM_TITLE),
        help = STRING_TOKEN(STR_CONFIG_TABLE_FORM_HELP);

#if FixedPcdGetBool (PcdHasOnBoardFanOutput)
      goto 0x1006,
        prompt = STRING_TOKEN(STR_COOLING_FAN_FORM_TITLE),
        help = STRING_TOKEN(STR_COOLING_FAN_FORM_HELP);
#endif

      goto 0x1007,
        prompt = STRING_TOKEN(STR_DEBUG_SERIAL_PORT_FORM_TITLE),
        help = STRING_TOKEN(STR_DEBUG_SERIAL_PORT_FORM_HELP);
    endform;

    form formid = 0x1000,
        title  = STRING_TOKEN(STR_DISPLAY_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_DISPLAY_FORM_SUBTITLE);

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = DisplayModePreset.Preset,
          prompt        = STRING_TOKEN(STR_DISPLAY_MODE_PRESET_PROMPT),
          help          = STRING_TOKEN(STR_DISPLAY_MODE_PRESET_HELP),
          flags         = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default value = get(DisplayModePresetDefault.Preset),
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_NATIVE), value = DISPLAY_MODE_NATIVE, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM), value = DISPLAY_MODE_CUSTOM, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_640_480_60), value = DISPLAY_MODE_640_480_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_800_600_60), value = DISPLAY_MODE_800_600_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1024_768_60), value = DISPLAY_MODE_1024_768_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1152_864_60), value = DISPLAY_MODE_1152_864_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1280_720_60), value = DISPLAY_MODE_1280_720_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1280_768_60), value = DISPLAY_MODE_1280_768_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1280_800_60), value = DISPLAY_MODE_1280_800_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1280_960_60), value = DISPLAY_MODE_1280_960_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1280_1024_60), value = DISPLAY_MODE_1280_1024_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1360_768_60), value = DISPLAY_MODE_1360_768_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1400_1050_60), value = DISPLAY_MODE_1400_1050_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1440_900_60), value = DISPLAY_MODE_1440_900_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1600_900_60), value = DISPLAY_MODE_1600_900_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1600_1200_60), value = DISPLAY_MODE_1600_1200_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1680_1050_60), value = DISPLAY_MODE_1680_1050_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1920_1080_60), value = DISPLAY_MODE_1920_1080_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_1920_1200_60), value = DISPLAY_MODE_1920_1200_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_2048_1152_60), value = DISPLAY_MODE_2048_1152_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_2560_1080_60), value = DISPLAY_MODE_2560_1080_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_2560_1440_60), value = DISPLAY_MODE_2560_1440_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_2560_1600_60), value = DISPLAY_MODE_2560_1600_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_3440_1440_60), value = DISPLAY_MODE_3440_1440_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_3840_2160_30), value = DISPLAY_MODE_3840_2160_30, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_3840_2160_60), value = DISPLAY_MODE_3840_2160_60, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_4096_2160_30), value = DISPLAY_MODE_4096_2160_30, flags = 0;
          option text   = STRING_TOKEN(STR_DISPLAY_MODE_4096_2160_60), value = DISPLAY_MODE_4096_2160_60, flags = 0;
        endoneof;

        suppressif (get(DisplayModePreset.Preset) != DISPLAY_MODE_CUSTOM);
          numeric varid = DisplayModeCustom.OscFreq,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_PIXEL_CLOCK),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_PIXEL_CLOCK_MIN,
            maximum       = VOP_PIXEL_CLOCK_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.OscFreq),
          endnumeric;
          numeric varid = DisplayModeCustom.HActive,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_HORIZONTAL_ACTIVE),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_HORIZONTAL_RES_MIN,
            maximum       = VOP_HORIZONTAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.HActive),
          endnumeric;
          numeric varid = DisplayModeCustom.HFrontPorch,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_HORIZONTAL_FRONT_PORCH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_HORIZONTAL_RES_MIN,
            maximum       = VOP_HORIZONTAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.HFrontPorch),
          endnumeric;
          numeric varid = DisplayModeCustom.HSync,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_HORIZONTAL_SYNC_WIDTH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_HORIZONTAL_RES_MIN,
            maximum       = VOP_HORIZONTAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.HSync),
          endnumeric;
          numeric varid = DisplayModeCustom.HBackPorch,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_HORIZONTAL_BACK_PORCH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_HORIZONTAL_RES_MIN,
            maximum       = VOP_HORIZONTAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.HBackPorch),
          endnumeric;
          oneof varid = DisplayModeCustom.HSyncActive,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_HORIZONTAL_SYNC_POLARITY),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default value = get(DisplayModeCustomDefault.HSyncActive),
            option text   = STRING_TOKEN(STR_MINUS_SIGN), value = 0, flags = 0;
            option text   = STRING_TOKEN(STR_PLUS_SIGN), value = 1, flags = 0;
          endoneof;
          numeric varid = DisplayModeCustom.VActive,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_VERTICAL_ACTIVE),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_VERTICAL_RES_MIN,
            maximum       = VOP_VERTICAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.VActive),
          endnumeric;
          numeric varid = DisplayModeCustom.VFrontPorch,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_VERTICAL_FRONT_PORCH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_VERTICAL_RES_MIN,
            maximum       = VOP_VERTICAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.VFrontPorch),
          endnumeric;
          numeric varid = DisplayModeCustom.VSync,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_VERTICAL_SYNC_WIDTH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_VERTICAL_RES_MIN,
            maximum       = VOP_VERTICAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.VSync),
          endnumeric;
          numeric varid = DisplayModeCustom.VBackPorch,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_VERTICAL_BACK_PORCH),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum       = VOP_VERTICAL_RES_MIN,
            maximum       = VOP_VERTICAL_RES_MAX,
            step          = 0,
            default value = get(DisplayModeCustomDefault.VBackPorch),
          endnumeric;
          oneof varid = DisplayModeCustom.VSyncActive,
            prompt        = STRING_TOKEN(STR_DISPLAY_MODE_CUSTOM_VERTICAL_SYNC_POLARITY),
            help          = STRING_TOKEN(STR_NULL_STRING),
            flags         = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default value = get(DisplayModeCustomDefault.VSyncActive),
            option text   = STRING_TOKEN(STR_MINUS_SIGN), value = 0, flags = 0;
            option text   = STRING_TOKEN(STR_PLUS_SIGN), value = 1, flags = 0;
          endoneof;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        orderedlist varid = DisplayConnectorsPriority.Order,
          prompt      = STRING_TOKEN(STR_DISPLAY_CONNECTORS_PRIORITY_PROMPT),
          help        = STRING_TOKEN(STR_DISPLAY_CONNECTORS_PRIORITY_HELP),
          flags       = RESET_REQUIRED,
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_HDMI0) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_HDMI0), value = VOP_OUTPUT_IF_HDMI0, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_HDMI1) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_HDMI1), value = VOP_OUTPUT_IF_HDMI1, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_EDP0) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_EDP0), value = VOP_OUTPUT_IF_EDP0, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_EDP1) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_EDP1), value = VOP_OUTPUT_IF_EDP1, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_DP0) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_DP0), value = VOP_OUTPUT_IF_DP0, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_DP1) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_DP1), value = VOP_OUTPUT_IF_DP1, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_MIPI0) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_MIPI0), value = VOP_OUTPUT_IF_MIPI0, flags = 0;
        endif;
        suppressif (get(DisplayConnectorsMask) & VOP_OUTPUT_IF_MIPI1) == 0;
          option text	= STRING_TOKEN(STR_DISPLAY_CONNECTOR_MIPI1), value = VOP_OUTPUT_IF_MIPI1, flags = 0;
        endif;
        endlist;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = DisplayForceOutput,
          prompt      = STRING_TOKEN(STR_DISPLAY_FORCE_OUTPUT_PROMPT),
          help        = STRING_TOKEN(STR_DISPLAY_FORCE_OUTPUT_HELP),
          flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGetBool (PcdDisplayForceOutputDefault),
          option text = STRING_TOKEN(STR_DISABLED), value = FALSE, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED), value = TRUE, flags = 0;
        endoneof;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = DisplayDuplicateOutput,
          prompt      = STRING_TOKEN(STR_DISPLAY_DUPLICATE_OUTPUT_PROMPT),
          help        = STRING_TOKEN(STR_DISPLAY_DUPLICATE_OUTPUT_HELP),
          flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGetBool (PcdDisplayDuplicateOutputDefault),
          option text = STRING_TOKEN(STR_DISABLED), value = FALSE, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED), value = TRUE, flags = 0;
        endoneof;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = DisplayRotation,
          prompt      = STRING_TOKEN(STR_DISPLAY_ROTATION_PROMPT),
          help        = STRING_TOKEN(STR_DISPLAY_ROTATION_HELP),
          flags       = NUMERIC_SIZE_2 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGet16 (PcdDisplayRotationDefault),
          option text = STRING_TOKEN(STR_DISPLAY_ROTATION_0), value = 0, flags = 0;
          option text = STRING_TOKEN(STR_DISPLAY_ROTATION_90), value = 90, flags = 0;
        endoneof;

        suppressif (get(DisplayConnectorsMask) & (VOP_OUTPUT_IF_HDMI0 | VOP_OUTPUT_IF_HDMI1)) == 0;
          subtitle text = STRING_TOKEN(STR_NULL_STRING);
          subtitle text = STRING_TOKEN(STR_DISPLAY_CONNECTOR_TYPE_HDMI);

          oneof varid = HdmiSignalingMode,
            prompt      = STRING_TOKEN(STR_HDMI_SIGNALING_MODE_PROMPT),
            help        = STRING_TOKEN(STR_HDMI_SIGNALING_MODE_HELP),
            flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet8 (PcdHdmiSignalingModeDefault),
            option text = STRING_TOKEN(STR_HDMI_SIGNALING_MODE_AUTO), value = HDMI_SIGNALING_MODE_AUTO, flags = 0;
            option text = STRING_TOKEN(STR_HDMI_SIGNALING_MODE_DVI), value = HDMI_SIGNALING_MODE_DVI, flags = 0;
            option text = STRING_TOKEN(STR_HDMI_SIGNALING_MODE_HDMI), value = HDMI_SIGNALING_MODE_HDMI, flags = 0;
          endoneof;
        endif;
    endform;

    form formid = 0x1001,
        title  = STRING_TOKEN(STR_CPU_PERF_FORM_TITLE);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCKS_SUBTITLE);

        oneof varid = CpuPerf_CPULClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGet32 (PcdCPULClusterClockPresetDefault),
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPULClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPULClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = DEFAULT;
          endoneof;
        endif;

        oneof varid = CpuPerf_CPUB01ClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGet32 (PcdCPUB01ClusterClockPresetDefault),
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB01ClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPUB01ClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2016), value = 2016, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2208), value = 2208, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2256), value = 2256, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2304), value = 2304, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2352), value = 2352, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2400), value = 2400, flags = DEFAULT;
          endoneof;
        endif;

        oneof varid = CpuPerf_CPUB23ClusterClockPreset.Preset,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_CLOCK_PRESET_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_PRESET_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGet32 (PcdCPUB23ClusterClockPresetDefault),
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEF), value = CPU_PERF_CLUSTER_CLOCK_PRESET_BOOTDEFAULT, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MIN), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MIN, flags = 0;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_MAX), value = CPU_PERF_CLUSTER_CLOCK_PRESET_MAX, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM), value = CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB23ClusterClockPreset.Preset == CPU_PERF_CLUSTER_CLOCK_PRESET_CUSTOM;
          oneof varid = CpuPerf_CPUB23ClusterClockCustom.Mhz,
            prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_CLOCK_CUSTOM_PROMPT),
            help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_CLOCK_CUSTOM_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_600), value = 600, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_816), value = 816, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_1800), value = 1800, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2016), value = 2016, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2208), value = 2208, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2256), value = 2256, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2304), value = 2304, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2352), value = 2352, flags = 0;
            option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_CLOCK_CUSTOM_2400), value = 2400, flags = DEFAULT;
          endoneof;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGES_SUBTITLE);

        oneof varid = CpuPerf_CPULClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPULClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPULClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUL_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUL_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        oneof varid = CpuPerf_CPUB01ClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB01ClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPUB01ClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUB01_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUB_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        oneof varid = CpuPerf_CPUB23ClusterVoltageMode.Mode,
          prompt      = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_VOLTAGE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_AUTO, flags = DEFAULT;
          option text = STRING_TOKEN(STR_CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM), value = CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM, flags = 0;
        endoneof;

        grayoutif NOT ideqval CpuPerf_CPUB23ClusterVoltageMode.Mode == CPU_PERF_CLUSTER_VOLTAGE_MODE_CUSTOM;
          numeric varid = CpuPerf_CPUB23ClusterVoltageCustom.Microvolts,
            prompt  = STRING_TOKEN(STR_CPU_PERF_CPUB23_CLUSTER_VOLTAGE_CUSTOM_PROMPT),
            help    = STRING_TOKEN(STR_CPU_PERF_CPUB_CLUSTER_VOLTAGE_CUSTOM_HELP),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = CLUSTER_MICROVOLTS_MIN,
            maximum = CLUSTER_MICROVOLTS_MAX,
            step = CLUSTER_MICROVOLTS_STEP,
            default = CPUB_CLUSTER_MICROVOLTS_DEFAULT,
          endnumeric;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_CPU_PERF_FORM_SUBTITLE);
    endform;

    form formid = 0x1002,
        title  = STRING_TOKEN(STR_COMBO_PHY_FORM_TITLE);

        grayoutif FixedPcdGetBool (PcdComboPhy0Switchable) == 0;
          oneof varid = ComboPhy0Mode.Mode,
            prompt      = STRING_TOKEN(STR_COMBO_PHY0_MODE_PROMPT),
#if   FixedPcdGet32 (PcdComboPhy0ModeDefault) == COMBO_PHY_MODE_PCIE
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_PCIE_HELP),
#elif FixedPcdGet32 (PcdComboPhy0ModeDefault) == COMBO_PHY_MODE_SATA
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_SATA_HELP),
#elif FixedPcdGet32 (PcdComboPhy0ModeDefault) == COMBO_PHY_MODE_USB3
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_USB3_HELP),
#else
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_UNCONNECTED_HELP),
#endif
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet32 (PcdComboPhy0ModeDefault),
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_UNCONNECTED), value = COMBO_PHY_MODE_UNCONNECTED, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_PCIE), value = COMBO_PHY_MODE_PCIE, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_SATA), value = COMBO_PHY_MODE_SATA, flags = 0;
          endoneof;
        endif;

        grayoutif FixedPcdGetBool (PcdComboPhy1Switchable) == 0;
          oneof varid = ComboPhy1Mode.Mode,
            prompt      = STRING_TOKEN(STR_COMBO_PHY1_MODE_PROMPT),
#if   FixedPcdGet32 (PcdComboPhy1ModeDefault) == COMBO_PHY_MODE_PCIE
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_PCIE_HELP),
#elif FixedPcdGet32 (PcdComboPhy1ModeDefault) == COMBO_PHY_MODE_SATA
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_SATA_HELP),
#elif FixedPcdGet32 (PcdComboPhy1ModeDefault) == COMBO_PHY_MODE_USB3
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_USB3_HELP),
#else
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_UNCONNECTED_HELP),
#endif
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet32 (PcdComboPhy1ModeDefault),
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_UNCONNECTED), value = COMBO_PHY_MODE_UNCONNECTED, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_PCIE), value = COMBO_PHY_MODE_PCIE, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_SATA), value = COMBO_PHY_MODE_SATA, flags = 0;
          endoneof;
        endif;

        grayoutif FixedPcdGetBool (PcdComboPhy2Switchable) == 0;
          oneof varid = ComboPhy2Mode.Mode,
            prompt      = STRING_TOKEN(STR_COMBO_PHY2_MODE_PROMPT),
#if   FixedPcdGet32 (PcdComboPhy2ModeDefault) == COMBO_PHY_MODE_PCIE
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_PCIE_HELP),
#elif FixedPcdGet32 (PcdComboPhy2ModeDefault) == COMBO_PHY_MODE_SATA
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_SATA_HELP),
#elif FixedPcdGet32 (PcdComboPhy2ModeDefault) == COMBO_PHY_MODE_USB3
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_USB3_HELP),
#else
            help        = STRING_TOKEN(STR_COMBO_PHY_MODE_DEFAULT_UNCONNECTED_HELP),
#endif
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet32 (PcdComboPhy2ModeDefault),
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_UNCONNECTED), value = COMBO_PHY_MODE_UNCONNECTED, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_PCIE), value = COMBO_PHY_MODE_PCIE, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_SATA), value = COMBO_PHY_MODE_SATA, flags = 0;
            option text = STRING_TOKEN(STR_COMBO_PHY_MODE_USB3), value = COMBO_PHY_MODE_USB3, flags = 0;
          endoneof;
        endif;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_COMBO_PHY_FORM_SUBTITLE);
    endform;

    form formid = 0x1003,
        title  = STRING_TOKEN(STR_USBDP_PHY_FORM_TITLE);

#if FixedPcdGetBool (PcdUsbDpPhy0Supported)
        oneof varid = UsbDpPhy0Usb3State.State,
          prompt      = STRING_TOKEN(STR_USBDP_PHY0_USB3_STATE_PROMPT),
          help        = STRING_TOKEN(STR_USBDP_PHY_USB3_STATE_PROMPT),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = USBDP_PHY_USB3_STATE_ENABLED,
          option text = STRING_TOKEN(STR_ENABLED), value = USBDP_PHY_USB3_STATE_ENABLED, flags = 0;
          option text = STRING_TOKEN(STR_DISABLED), value = USBDP_PHY_USB3_STATE_DISABLED, flags = 0;
        endoneof;
#endif

#if FixedPcdGetBool (PcdUsbDpPhy1Supported)
        oneof varid = UsbDpPhy1Usb3State.State,
          prompt      = STRING_TOKEN(STR_USBDP_PHY1_USB3_STATE_PROMPT),
          help        = STRING_TOKEN(STR_USBDP_PHY_USB3_STATE_PROMPT),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = USBDP_PHY_USB3_STATE_ENABLED,
          option text = STRING_TOKEN(STR_ENABLED), value = USBDP_PHY_USB3_STATE_ENABLED, flags = 0;
          option text = STRING_TOKEN(STR_DISABLED), value = USBDP_PHY_USB3_STATE_DISABLED, flags = 0;
        endoneof;
#endif
    endform;

#if FixedPcdGetBool (PcdPcie30Supported)
    form formid = 0x1004,
        title  = STRING_TOKEN(STR_PCIE30_FORM_TITLE);

        oneof varid = Pcie30State.State,
          prompt      = STRING_TOKEN(STR_PCIE30_STATE_PROMPT),
          help        = STRING_TOKEN(STR_PCIE30_STATE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = PCIE30_STATE_ENABLED,
          option text = STRING_TOKEN(STR_DISABLED), value = PCIE30_STATE_DISABLED, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED), value = PCIE30_STATE_ENABLED, flags = 0;
        endoneof;

        grayoutif FixedPcdGetBool (PcdPcie30PhyModeSwitchable) == 0;
          oneof varid = Pcie30PhyMode.Mode,
            prompt      = STRING_TOKEN(STR_PCIE30_PHY_MODE_PROMPT),
            help        = STRING_TOKEN(STR_PCIE30_PHY_MODE_HELP),
            flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet8 (PcdPcie30PhyModeDefault),
            option text = STRING_TOKEN(STR_PCIE30_PHY_MODE_AGGREGATION), value = PCIE30_PHY_MODE_AGGREGATION, flags = 0;
            option text = STRING_TOKEN(STR_PCIE30_PHY_MODE_NANBNB), value = PCIE30_PHY_MODE_NANBNB, flags = 0;
            option text = STRING_TOKEN(STR_PCIE30_PHY_MODE_NANBBI), value = PCIE30_PHY_MODE_NANBBI, flags = 0;
            option text = STRING_TOKEN(STR_PCIE30_PHY_MODE_NABINB), value = PCIE30_PHY_MODE_NABINB, flags = 0;
            option text = STRING_TOKEN(STR_PCIE30_PHY_MODE_NABIBI), value = PCIE30_PHY_MODE_NABIBI, flags = 0;
          endoneof;
        endif;
    endform;
#endif

    form formid = 0x1005,
        title  = STRING_TOKEN(STR_CONFIG_TABLE_FORM_TITLE);

        oneof varid = ConfigTableMode.Mode,
          prompt      = STRING_TOKEN(STR_CONFIG_TABLE_MODE_PROMPT),
          help        = STRING_TOKEN(STR_CONFIG_TABLE_MODE_HELP),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = FixedPcdGet32 (PcdConfigTableModeDefault),
          option text = STRING_TOKEN(STR_CONFIG_TABLE_MODE_ACPI), value = CONFIG_TABLE_MODE_ACPI, flags = 0;
          option text = STRING_TOKEN(STR_CONFIG_TABLE_MODE_FDT), value = CONFIG_TABLE_MODE_FDT, flags = 0;
          option text = STRING_TOKEN(STR_CONFIG_TABLE_MODE_ACPI_FDT), value = CONFIG_TABLE_MODE_ACPI_FDT, flags = 0;
        endoneof;

        suppressif (get(ConfigTableMode.Mode) & CONFIG_TABLE_MODE_ACPI) == 0;
          subtitle text = STRING_TOKEN(STR_NULL_STRING);
          subtitle text = STRING_TOKEN(STR_CONFIG_TABLE_ACPI_SUBTITLE);

          oneof varid = AcpiPcieEcamCompatMode.Mode,
            prompt      = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_PROMPT),
            help        = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet32 (PcdAcpiPcieEcamCompatModeDefault),
            option text = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6_SINGLE_DEV), value = ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6_SINGLE_DEV, flags = 0;
            option text = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6_GRAVITON), value = ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6_GRAVITON, flags = 0;
            option text = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_SINGLE_DEV), value = ACPI_PCIE_ECAM_COMPAT_MODE_SINGLE_DEV, flags = 0;
            option text = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6), value = ACPI_PCIE_ECAM_COMPAT_MODE_NXPMX6, flags = 0;
            option text = STRING_TOKEN(STR_ACPI_PCIE_ECAM_COMPAT_MODE_GRAVITON), value = ACPI_PCIE_ECAM_COMPAT_MODE_GRAVITON, flags = 0;
          endoneof;
        endif;

        suppressif (get(ConfigTableMode.Mode) & CONFIG_TABLE_MODE_FDT) == 0;
          subtitle text = STRING_TOKEN(STR_NULL_STRING);
          subtitle text = STRING_TOKEN(STR_CONFIG_TABLE_FDT_SUBTITLE);

          suppressif ideqval FdtCompatModeVendorSupported == 0 AND ideqval FdtCompatModeMainlineSupported == 0;
          grayoutif  ideqval FdtCompatModeVendorSupported == 0 OR ideqval FdtCompatModeMainlineSupported == 0;
            oneof varid = FdtCompatMode.Mode,
              prompt      = STRING_TOKEN(STR_FDT_COMPAT_MODE_PROMPT),
              help        = STRING_TOKEN(STR_FDT_COMPAT_MODE_HELP),
              flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
              default     = FixedPcdGet32 (PcdFdtCompatModeDefault),
              option text = STRING_TOKEN(STR_FDT_COMPAT_MODE_VENDOR), value = FDT_COMPAT_MODE_VENDOR, flags = 0;
              option text = STRING_TOKEN(STR_FDT_COMPAT_MODE_MAINLINE), value = FDT_COMPAT_MODE_MAINLINE, flags = 0;
            endoneof;
            subtitle text = STRING_TOKEN(STR_NULL_STRING);
          endif;
          endif;

          suppressif get(FdtCompatMode.Mode) != FDT_COMPAT_MODE_MAINLINE;
            oneof varid = FdtForceGop.State,
              prompt      = STRING_TOKEN(STR_FDT_FORCE_GOP_PROMPT),
              help        = STRING_TOKEN(STR_FDT_FORCE_GOP_HELP),
              flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
              default     = FixedPcdGet8 (PcdFdtForceGopDefault),
              option text = STRING_TOKEN(STR_DISABLED), value = FALSE, flags = 0;
              option text = STRING_TOKEN(STR_ENABLED), value = TRUE, flags = 0;
            endoneof;
            subtitle text = STRING_TOKEN(STR_NULL_STRING);
          endif;

          oneof varid = FdtSupportOverrides.State,
            prompt      = STRING_TOKEN(STR_FDT_SUPPORT_OVERRIDES_PROMPT),
            help        = STRING_TOKEN(STR_FDT_SUPPORT_OVERRIDES_HELP),
            flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
            default     = FixedPcdGet8 (PcdFdtSupportOverridesDefault),
            option text = STRING_TOKEN(STR_DISABLED), value = FALSE, flags = 0;
            option text = STRING_TOKEN(STR_ENABLED), value = TRUE, flags = 0;
          endoneof;

          suppressif ideqval FdtSupportOverrides.State == 0;
            subtitle text = STRING_TOKEN(STR_NULL_STRING);
            subtitle text = STRING_TOKEN(STR_FDT_OVERRIDE_SUBTITLE);

            oneof varid = FdtOverrideFixup,
              prompt      = STRING_TOKEN(STR_FDT_OVERRIDE_FIXUP_PROMPT),
              help        = STRING_TOKEN(STR_FDT_OVERRIDE_FIXUP_HELP),
              flags       = NUMERIC_SIZE_1 | INTERACTIVE | RESET_REQUIRED,
              default     = FixedPcdGet8 (PcdFdtOverrideFixupDefault),
              option text = STRING_TOKEN(STR_DISABLED), value = FALSE, flags = 0;
              option text = STRING_TOKEN(STR_ENABLED), value = TRUE, flags = 0;
            endoneof;

            subtitle text = STRING_TOKEN(STR_NULL_STRING);

            string varid = FdtOverrideBasePath.Path,
              prompt  = STRING_TOKEN(STR_FDT_OVERRIDE_BASE_PATH_PROMPT),
              help    = STRING_TOKEN(STR_FDT_OVERRIDE_BASE_PATH_HELP),
              flags   = INTERACTIVE | RESET_REQUIRED,
              minsize = 0,
              maxsize = FDT_OVERRIDE_PATH_MAX_LEN,
            endstring;

            string varid = FdtOverrideOverlayPath.Path,
              prompt  = STRING_TOKEN(STR_FDT_OVERRIDE_OVERLAY_PATH_PROMPT),
              help    = STRING_TOKEN(STR_FDT_OVERRIDE_OVERLAY_PATH_HELP),
              flags   = INTERACTIVE | RESET_REQUIRED,
              minsize = 0,
              maxsize = FDT_OVERRIDE_PATH_MAX_LEN,
            endstring;
          endif;
        endif;
    endform;

#if FixedPcdGetBool (PcdHasOnBoardFanOutput)
    form formid = 0x1006,
        title  = STRING_TOKEN(STR_COOLING_FAN_FORM_TITLE);

        oneof varid = CoolingFanState.State,
          prompt      = STRING_TOKEN(STR_COOLING_FAN_STATE_PROMPT),
          help        = STRING_TOKEN(STR_COOLING_FAN_STATE_PROMPT),
          flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
          default     = COOLING_FAN_STATE_ENABLED,
          option text = STRING_TOKEN(STR_DISABLED), value = COOLING_FAN_STATE_DISABLED, flags = 0;
          option text = STRING_TOKEN(STR_ENABLED), value = COOLING_FAN_STATE_ENABLED, flags = 0;
        endoneof;

        grayoutif NOT ideqval CoolingFanState.State == COOLING_FAN_STATE_ENABLED;
          numeric varid = CoolingFanSpeed.Percentage,
            prompt  = STRING_TOKEN(STR_COOLING_FAN_SPEED_PROMPT),
            help    = STRING_TOKEN(STR_COOLING_FAN_SPEED_PROMPT),
            flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            minimum = FAN_PERCENTAGE_MIN,
            maximum = FAN_PERCENTAGE_MAX,
            step = FAN_PERCENTAGE_STEP,
            default = FAN_PERCENTAGE_DEFAULT,
          endnumeric;
        endif;
    endform;
#endif

    form formid = 0x1007,
        title  = STRING_TOKEN(STR_DEBUG_SERIAL_PORT_FORM_TITLE);

        numeric varid = DebugSerialPortBaudRate.Value,
          prompt  = STRING_TOKEN(STR_DEBUG_SERIAL_PORT_BAUD_RATE_PROMPT),
          help    = STRING_TOKEN(STR_NULL_STRING),
          flags   = DISPLAY_UINT_DEC | NUMERIC_SIZE_8 | INTERACTIVE | RESET_REQUIRED,
          minimum = DEBUG_SERIAL_PORT_BAUD_RATE_MIN,
          maximum = DEBUG_SERIAL_PORT_BAUD_RATE_MAX,
          step    = 0,
          default = DEBUG_SERIAL_PORT_BAUD_RATE_DEFAULT,
        endnumeric;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);
        subtitle text = STRING_TOKEN(STR_DEBUG_SERIAL_PORT_SUBTITLE);
    endform;

endformset;
